import os
import json
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse, FileResponse, Response
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import uvicorn
import aiohttp
from database import Database
from moysklad_api import MoySkladAPI
from config import SHOP_NAME, CURRENCY

app = FastAPI(title="Telegram Shop WebApp")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
templates = Jinja2Templates(directory="templates")
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@app.get("/cache/{cache_key}.jpg")
async def get_cached_image(cache_key: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    cache_path = f"image_cache/{cache_key}.jpg"
    if os.path.exists(cache_path):
        return FileResponse(cache_path, media_type="image/jpeg")
    else:
        raise HTTPException(status_code=404, detail="Image not found")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()
moysklad = MoySkladAPI()

@app.get("/")
async def catalog_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        products = await moysklad.get_products(limit=1000, offset=0)
        categories = await moysklad.get_categories()
        
        return templates.TemplateResponse("catalog.html", {
            "request": {},
            "products": products,
            "categories": categories
        })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return templates.TemplateResponse("catalog.html", {
            "request": {},
            "products": [],
            "categories": []
        })

# –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Ä–æ—É—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –Ω–∞ —Å—Ç—Ä–æ–∫–µ 295

@app.get("/cart", response_class=HTMLResponse)
async def cart_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = "demo_user"  # –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º demo_user
    
    cart_items = db.get_cart(user_id)
    total = sum(item['price'] * item['quantity'] for item in cart_items)
    
    return templates.TemplateResponse("cart.html", {
        "request": request,
        "cart_items": cart_items,
        "total": total,
        "shop_name": "–ú–æ–π –ú–∞–≥–∞–∑–∏–Ω",
        "currency": "‚ÇΩ"
    })

@app.post("/api/add-to-cart")
async def add_to_cart(request: Request):
    """API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    data = await request.json()
    
    user_id = data.get('user_id', 'demo_user')
    product_id = data.get('product_id')
    color = data.get('color')  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç
    size = data.get('size')    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
    quantity = data.get('quantity', 1)
    
    if not product_id:
        raise HTTPException(status_code=400, detail="Product ID required")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    products = await moysklad.get_products(limit=1000, offset=0)
    product = next((p for p in products if p.get('original_id') == product_id), None)
    
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    max_stock = product.get('stock', 0)
    if size and product.get('modifications_text'):
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "–í –Ω–∞–ª–∏—á–∏–∏: 42-1, 44-0"
        try:
            mods = product['modifications_text'].replace('–í –Ω–∞–ª–∏—á–∏–∏: ', '').split(', ')
            size_to_stock = {m.split('-')[0]: int(float(m.split('-')[1])) for m in mods if '-' in m}
            if size in size_to_stock:
                max_stock = size_to_stock[size]
        except Exception:
            pass
    if quantity > max_stock:
        raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–æ: {int(max_stock)}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —Ü–≤–µ—Ç–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º
    product_name = product['name']
    if color and size:
        product_name = f"{product['name']} (—Ü–≤–µ—Ç {color}, —Ä–∞–∑–º–µ—Ä {size})"
    elif color:
        product_name = f"{product['name']} (—Ü–≤–µ—Ç {color})"
    elif size:
        product_name = f"{product['name']} (—Ä–∞–∑–º–µ—Ä {size})"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    db.add_to_cart(
        user_id=user_id,
        product_id=f"{product_id}_{color}_{size}" if color and size else f"{product_id}_{size}" if size else product_id,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞
        product_name=product_name,
        quantity=quantity,
        price=product['price'],
        size=size,
        color=color,
        image=product.get('image')  # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    )
    
    return {"success": True, "message": "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É"}

@app.get("/api/categories")
async def get_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        categories = await moysklad.get_categories()
        return {"categories": categories}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return {"categories": []}

@app.get("/api/products")
async def get_products(limit: int = 50, offset: int = 0, category: str = None):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    load_limit = limit * 3 if category and category != 'all' else limit
    products = await moysklad.get_products(limit=load_limit, offset=offset)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if category and category != 'all':
        original_count = len(products)
        products = [p for p in products if p.get('category') == category]
        print(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': –∏–∑ {original_count} –Ω–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã)
    if limit < 1000 and len(products) > limit:
        products = products[:limit]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ç–æ–≤–∞—Ä—ã
    has_more = len(products) == limit
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 0 —Ç–æ–≤–∞—Ä–æ–≤, –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç
    if len(products) == 0:
        has_more = False
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã, –Ω–æ –º–µ–Ω—å—à–µ —á–µ–º limit, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ
    if len(products) > 0 and len(products) < limit:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ç–æ–≤–∞—Ä—ã, –¥–µ–ª–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        try:
            next_offset = offset + load_limit
            next_products = await moysklad.get_products(limit=10, offset=next_offset)
            
            # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏
            if category and category != 'all':
                next_products = [p for p in next_products if p.get('category') == category]
            
            has_more = len(next_products) > 0
            print(f"üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: offset={next_offset}, –ø–æ–ª—É—á–µ–Ω–æ={len(next_products)}, has_more={has_more}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            has_more = False
    
    print(f"API /api/products: limit={limit}, offset={offset}, –ø–æ–ª—É—á–µ–Ω–æ={len(products)}, has_more={has_more}")
    
    return {"products": products, "has_more": has_more}

@app.get("/api/products-with-images")
async def get_products_with_images():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    products = await moysklad.get_products(limit=1000, offset=0)
    return {"products": products}

@app.get("/api/categories")
async def get_categories():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        categories = await moysklad.get_categories()
        return {"categories": categories}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/categories-with-products")
async def get_categories_with_products():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        products = await moysklad.get_products(limit=1000, offset=0)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ folder.name
        category_counts = {}
        for product in products:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–∏
            if product.get('stock', 0) > 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º category –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category_name = product.get('category', 'Relealized')
                category_counts[category_name] = category_counts.get(category_name, 0) + 1
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        categories_with_products = []
        for category_name, count in category_counts.items():
            categories_with_products.append({
                'id': category_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ ID
                'name': category_name,
                'product_count': count
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ (—É–±—ã–≤–∞–Ω–∏–µ)
        categories_with_products.sort(key=lambda x: x['product_count'], reverse=True)
        
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏: {[f'{cat['name']}({cat['product_count']})' for cat in categories_with_products]}")
        
        return {"categories": categories_with_products}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/category/{category_id}")
async def get_category_info(category_id: str):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category_info = await moysklad.get_category_info(category_id)
        if category_info:
            return {"category": category_info}
        else:
            raise HTTPException(status_code=404, detail="Category not found")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/cart/{user_id}")
async def get_cart(user_id: str):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cart_items = db.get_cart(user_id)
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–¥–∞–µ–º max_stock –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞)
    try:
        products = await moysklad.get_products(limit=1000, offset=0)
        by_id = {p.get('original_id'): p for p in products}
        for item in cart_items:
            base_id = item['product_id']
            size = None
            if '_' in base_id:
                parts = base_id.split('_')
                base_id = parts[0]
                size = parts[1] if len(parts) > 1 else None
            p = by_id.get(base_id)
            max_stock = p.get('stock', 0) if p else 0
            if size and p and p.get('modifications_text'):
                try:
                    mods = p['modifications_text'].replace('–í –Ω–∞–ª–∏—á–∏–∏: ', '').split(', ')
                    size_to_stock = {m.split('-')[0]: int(float(m.split('-')[1])) for m in mods if '-' in m}
                    if size in size_to_stock:
                        max_stock = size_to_stock[size]
                except Exception:
                    pass
            item['max_stock'] = int(max_stock)
    except Exception:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º max_stock
        pass

    total = sum(item['price'] * item['quantity'] for item in cart_items)
    return {"cart_items": cart_items, "total": total}

@app.post("/api/clear-cart")
async def clear_cart(request: Request):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = await request.json()
        user_id = data.get("user_id", "demo_user")
        
        db.clear_cart(user_id)
        
        return {"success": True, "message": "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞"}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return {"success": False, "message": "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"}

@app.post("/api/update-cart")
async def update_cart(request: Request):
    """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã"""
    data = await request.json()
    user_id = data.get('user_id', 'demo_user')
    product_id = data.get('product_id')  # —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä (product_originalId_size)
    new_quantity = int(data.get('quantity', 1))

    if not product_id:
        raise HTTPException(status_code=400, detail="Product ID required")

    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π id –∏ —Ä–∞–∑–º–µ—Ä –∏–∑ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ product_id
    base_id = product_id
    size = None
    if '_' in product_id:
        parts = product_id.split('_')
        base_id = parts[0]
        size = parts[1] if len(parts) > 1 else None

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
    products = await moysklad.get_products(limit=1000, offset=0)
    product = next((p for p in products if p.get('original_id') == base_id), None)
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –ø–æ –æ—Å—Ç–∞—Ç–∫—É
    max_stock = product.get('stock', 0)
    if size and product.get('modifications_text'):
        try:
            mods = product['modifications_text'].replace('–í –Ω–∞–ª–∏—á–∏–∏: ', '').split(', ')
            size_to_stock = {m.split('-')[0]: int(float(m.split('-')[1])) for m in mods if '-' in m}
            if size in size_to_stock:
                max_stock = size_to_stock[size]
        except Exception:
            pass

    # –ö–ª—ç–º–ø–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º
    if new_quantity < 1:
        db.remove_from_cart(user_id, product_id)
    else:
        if new_quantity > int(max_stock):
            new_quantity = int(max_stock)
        db.set_cart_quantity(user_id, product_id, new_quantity)

    return {"success": True, "message": "–ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", "quantity": new_quantity, "max_stock": int(max_stock)}

@app.post("/api/remove-from-cart")
async def remove_from_cart(data: dict):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        user_id = data.get('user_id')
        product_id = data.get('product_id')
        
        if not user_id or not product_id:
            raise HTTPException(status_code=400, detail="User ID and Product ID required")
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        db.remove_from_cart(user_id, product_id)
        
        return {"success": True, "message": "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/refresh-products")
async def refresh_products():
    """API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        moysklad.force_refresh_products()
        return {"success": True, "message": "–ö—ç—à —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–º–µ—á–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "status": "success"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}"}

@app.get("/api/product/{product_id}")
async def get_product(product_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –∏—â–µ–º –Ω—É–∂–Ω—ã–π –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É ID
        products = await moysklad.get_products(limit=1000, offset=0)
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É ID
        product = None
        for p in products:
            if p.get('original_id') == product_id:
                product = p
                break
        
        if product:
            return {"product": product}
        else:
            raise HTTPException(status_code=404, detail="Product not found")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/product/{product_id}")
async def product_page(product_id: str):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        products = await moysklad.get_products(limit=1000, offset=0)
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä
        product = None
        for p in products:
            if p.get('original_id') == product_id:
                product = p
                break
        
        if not product:
            raise HTTPException(status_code=404, detail="Product not found")
        
        return templates.TemplateResponse("product.html", {
            "request": {}, 
            "product": product
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/cache/stats")
async def get_cache_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    return {"message": "Image cache not implemented"}

@app.post("/api/cache/clear")
async def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞"""
    return {"message": "Image cache not implemented"}

@app.get("/proxy/image/{image_id}")
async def proxy_image(image_id: str):
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π MoySklad —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ MoySklad
        headers = moysklad.headers
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = f"https://api.moysklad.ru/api/remap/1.2/download/{image_id}"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        async with aiohttp.ClientSession() as session:
            async with session.get(image_url, headers=headers) as response:
                if response.status == 200:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_data = await response.read()
                    content_type = response.headers.get('content-type', 'image/jpeg')
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    return Response(
                        content=image_data,
                        media_type=content_type,
                        headers={
                            'Cache-Control': 'public, max-age=3600',
                            'Access-Control-Allow-Origin': '*'
                        }
                    )
                else:
                    raise HTTPException(status_code=response.status, detail="Image not found")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=f"Error loading image: {e}")

if __name__ == "__main__":
    uvicorn.run("webapp:app", host="0.0.0.0", port=8000, reload=True)
