#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import asyncio
import aiohttp
import requests
from moysklad_api import MoySkladAPI

async def check_all_products_for_images():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
    api = MoySkladAPI()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    new_token = api.get_access_token()
    if new_token:
        api.api_token = new_token
        api.headers['Authorization'] = f'Bearer {new_token}'
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –≤ API: {new_token[:20]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    print("üì¶ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã...")
    all_products = await api.get_products(limit=1000, offset=0)
    
    if not all_products:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
        return
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_products)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 100 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    products_with_images = []
    products_without_images = []
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 100 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    for i, product in enumerate(all_products[:100]):
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä {i+1}/100: {product.get('name')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            product_detail = await api._get_product_detail(product.get('original_id'))
            
            if product_detail:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if product_detail.get('images') and product_detail['images'].get('rows'):
                    image_count = len(product_detail['images']['rows'])
                    if image_count > 0:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_count} —à—Ç.")
                        products_with_images.append({
                            'name': product.get('name'),
                            'id': product.get('original_id'),
                            'image_count': image_count
                        })
                    else:
                        print(f"‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (rows –ø—É—Å—Ç–æ–π)")
                        products_without_images.append(product.get('name'))
                else:
                    print(f"‚ùå –ù–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    products_without_images.append(product.get('name'))
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞")
                products_without_images.append(product.get('name'))
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product.get('name')}: {e}")
            products_without_images.append(product.get('name'))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
    print("="*50)
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: 100")
    print(f"‚úÖ –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(products_with_images)}")
    print(f"‚ùå –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(products_without_images)}")
    
    if products_with_images:
        print(f"\nüñºÔ∏è –¢–û–í–ê–†–´ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò:")
        for product in products_with_images:
            print(f"   üì∏ {product['name']} (ID: {product['id']}) - {product['image_count']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    print(f"\nüìã –ü–ï–†–í–´–ï 10 –¢–û–í–ê–†–û–í –ë–ï–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
    for i, name in enumerate(products_without_images[:10]):
        print(f"   {i+1}. {name}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    asyncio.run(check_all_products_for_images())
