import aiohttp
import asyncio
import json

async def debug_products():
    api_token = "70ff03c8f6f33ae7b62744eb0af127b043de02fb"
    base_url = "https://api.moysklad.ru/api/remap/1.2"
    
    headers = {
        'Authorization': f'Bearer {api_token}',
        'Accept': 'application/json;charset=utf-8',
        'Accept-Encoding': 'gzip'
    }
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
    print("üîç –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã...")
    products_url = f"{base_url}/entity/product"
    products_params = {'limit': 5}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(products_url, headers=headers, params=products_params) as response:
            if response.status == 200:
                products_data = await response.json()
                products = products_data.get('rows', [])
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                
                if products:
                    first_product = products[0]
                    print(f"üîç –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {first_product.get('name')} (ID: {first_product.get('id')})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    variants_count = first_product.get('variantsCount', 0)
                    print(f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {variants_count}")
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print("\nüîç –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    variants_url = f"{base_url}/entity/variant"
    variants_params = {
        'limit': 10,
        'expand': 'product.supplier'
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(variants_url, headers=headers, params=variants_params) as response:
            if response.status == 200:
                variants_data = await response.json()
                variants = variants_data.get('rows', [])
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {len(variants)}")
                
                if variants:
                    print("\nüîç –ü–µ—Ä–≤—ã–µ 3 –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                    for i, variant in enumerate(variants[:3]):
                        print(f"\n–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è {i+1}:")
                        print(f"üìÑ ID: {variant.get('id')}")
                        print(f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {variant.get('name')}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —Ç–æ–≤–∞—Ä–æ–º
                        if variant.get('product'):
                            product_info = variant['product']
                            print(f"üìÑ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–≤–∞—Ä: {product_info.get('name')}")
                            print(f"üìÑ ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {product_info.get('id')}")
                        else:
                            print("üìÑ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–≤–∞—Ä: –ù–ï–¢ –°–í–Ø–ó–ò")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                        if variant.get('characteristics'):
                            print(f"üîß –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
                            for char in variant['characteristics']:
                                print(f"  - {char.get('name')}: {char.get('value')}")
                        else:
                            print("üîß –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –ù–ï–¢")
    
    # 3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    print("\nüîç –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º...")
    variants_by_product = {}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(variants_url, headers=headers, params=variants_params) as response:
            if response.status == 200:
                variants_data = await response.json()
                variants = variants_data.get('rows', [])
                
                for variant in variants:
                    if variant.get('product') and variant['product'].get('id'):
                        product_id = variant['product']['id']
                        if product_id not in variants_by_product:
                            variants_by_product[product_id] = []
                        variants_by_product[product_id].append(variant)
                
                print(f"üìã –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –ø–æ —Ç–æ–≤–∞—Ä–∞–º: {len(variants_by_product)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø
                for i, (product_id, product_variants) in enumerate(list(variants_by_product.items())[:3]):
                    print(f"\n–ì—Ä—É–ø–ø–∞ {i+1}:")
                    print(f"üìÑ ID —Ç–æ–≤–∞—Ä–∞: {product_id}")
                    print(f"üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {len(product_variants)}")
                    
                    for j, variant in enumerate(product_variants[:2]):
                        print(f"  –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è {j+1}: {variant.get('name')}")

if __name__ == "__main__":
    asyncio.run(debug_products())
