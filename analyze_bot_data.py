#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–æ—Ç–µ
"""

import requests
import json

def analyze_bot_data():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–æ—Ç–µ"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–µ...")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–æ—Ç–∞
    try:
        response = requests.get("http://localhost:8000/api/products?limit=10&offset=0")
        if response.status_code == 200:
            products = response.json()['products']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    print("\n" + "=" * 80)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    total_variants = 0
    total_colors = 0
    total_sizes = 0
    products_with_variants = 0
    products_without_variants = 0
    
    for i, product in enumerate(products, 1):
        print(f"\n{i}. {product['name']}")
        print(f"   ID: {product['original_id']}")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}")
        print(f"   –û–±—â–∏–π stock: {product['stock']}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
        colors = product['available_colors']
        colors_count = len(colors)
        total_colors += colors_count
        if colors_count > 0:
            print(f"   –¶–≤–µ—Ç–∞ ({colors_count}): {', '.join(colors)}")
        else:
            print(f"   –¶–≤–µ—Ç–∞: –Ω–µ—Ç")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
        sizes = product['available_sizes']
        sizes_count = len(sizes)
        total_sizes += sizes_count
        if sizes_count > 0:
            print(f"   –†–∞–∑–º–µ—Ä—ã ({sizes_count}): {', '.join(sizes)}")
        else:
            print(f"   –†–∞–∑–º–µ—Ä—ã: –Ω–µ—Ç")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        variants = product['variants']
        variants_count = len(variants)
        total_variants += variants_count
        
        if variants_count > 0:
            products_with_variants += 1
            print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã ({variants_count}):")
            for j, variant in enumerate(variants, 1):
                variant_stock = variant.get('stock', 0)
                variant_colors = variant.get('colors', [])
                variant_sizes = variant.get('sizes', [])
                
                print(f"     {j}. {variant['name']}")
                print(f"        Stock: {variant_stock}")
                if variant_colors:
                    print(f"        –¶–≤–µ—Ç–∞: {', '.join(variant_colors)}")
                if variant_sizes:
                    print(f"        –†–∞–∑–º–µ—Ä—ã: {', '.join(variant_sizes)}")
        else:
            products_without_variants += 1
            print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: –Ω–µ—Ç")
        
        print("-" * 60)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 80)
    print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    print(f"–¢–æ–≤–∞—Ä–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏: {products_with_variants}")
    print(f"–¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {products_without_variants}")
    print(f"–í—Å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {total_variants}")
    print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: {total_colors}")
    print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤: {total_sizes}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:")
    print("-" * 40)
    
    for i, product in enumerate(products, 1):
        colors_count = len(product['available_colors'])
        sizes_count = len(product['available_sizes'])
        variants_count = len(product['variants'])
        
        # –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        expected_variants = max(1, colors_count) * max(1, sizes_count)
        if colors_count == 0 and sizes_count == 0:
            expected_variants = 1
        
        status = "‚úÖ" if variants_count == expected_variants else "‚ùå"
        print(f"{status} {product['name']}: –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_variants}, –µ—Å—Ç—å {variants_count}")

if __name__ == "__main__":
    analyze_bot_data()
