import aiohttp
import time
import re
from typing import List, Dict, Any, Optional

class MoySkladAPI:
    def __init__(self, api_token: str = None):
        if api_token is None:
            from config import MOYSKLAD_API_TOKEN
            api_token = MOYSKLAD_API_TOKEN
            
        self.api_token = api_token
        self.base_url = "https://api.moysklad.ru/api/remap/1.2"
        self.headers = {
            'Authorization': f'Bearer {api_token}' if api_token else '',
            'Accept': 'application/json;charset=utf-8',
            'Accept-Encoding': 'gzip'
        }
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._products_cache = []
        self._cache_timestamp = 0
        self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        # –ö—ç—à –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self._images_cache = {}
        self._images_cache_ttl = 3600  # 1 —á–∞—Å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from database import Database
        self.db = Database()

    def _is_cache_valid(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
        return (time.time() - self._cache_timestamp) < self._cache_ttl

    def _get_cached_products(self, limit: int, offset: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫—ç—à–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        start = offset
        end = offset + limit
        return self._products_cache[start:end]

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        self._products_cache = []
        self._cache_timestamp = 0
        print("üóëÔ∏è –ö—ç—à —Ç–æ–≤–∞—Ä–æ–≤ –æ—á–∏—â–µ–Ω")
    
    def clear_images_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self._images_cache.clear()
        print("üóëÔ∏è –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω")
    
    def _is_image_cache_valid(self, image_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if image_id not in self._images_cache:
            return False
        cache_entry = self._images_cache[image_id]
        return (time.time() - cache_entry['timestamp']) < self._images_cache_ttl

    def force_refresh_products(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        self.clear_cache()
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–æ–≤–∞—Ä–æ–≤")

    async def get_products(self, limit=50, offset=0):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print(f"üîç –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤: limit={limit}, offset={offset}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if self._is_cache_valid():
            print(f"‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à —Ç–æ–≤–∞—Ä–æ–≤ (–≤–æ–∑—Ä–∞—Å—Ç: {int(time.time() - self._cache_timestamp)}—Å)")
            return self._get_cached_products(limit, offset)
        
        print("üîÑ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã (products)
            products_data = await self._get_products_info()
            print(f"üõçÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(products_data)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (variants) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            variants_data = await self._get_variants()
            print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {len(variants_data)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
            stock_data = await self._get_stock_all()
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(stock_data)}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            products = await self._merge_products_with_variants_and_stock(products_data, variants_data, stock_data)
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._products_cache = products
            self._cache_timestamp = time.time()
            print(f"üíæ –¢–æ–≤–∞—Ä—ã –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã ({len(products)} —à—Ç.)")
            
            return self._get_cached_products(limit, offset)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            return self._get_test_products()

    async def _get_products_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö"""
        print("üõçÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã...")
        
        if not self.api_token:
            print("‚ö†Ô∏è API —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return []

        try:
            url = f"{self.base_url}/entity/product"
            params = {'limit': 2000}  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
            
            print(f"üì° –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ –∫: {url}")
            print(f"üîë Headers: {self.headers}")

            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=self.headers, params=params) as response:
                    print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤: {response.status}")

                    if response.status == 200:
                        data = await response.json()
                        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(data.get('rows', []))}")
                        
                        if data.get('rows'):
                            first_item = data['rows'][0]
                            print(f"üîç –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {first_item.get('name', 'Unknown')}")
                        
                        return data.get('rows', [])
                    else:
                        error_text = await response.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ API –ú–æ–π–°–∫–ª–∞–¥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {response.status}")
                        print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
                        return []

        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            return []

    async def _get_variants(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π (variants) —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤...")
        
        if not self.api_token:
            print("‚ö†Ô∏è API —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return []

        try:
            url = f"{self.base_url}/entity/variant"
            params = {
                'limit': 1000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞ –∑–∞–ø—Ä–æ—Å
                'expand': 'product'  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ç–æ–≤–∞—Ä–µ
            }
            
            print(f"üì° –ó–∞–ø—Ä–æ—Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –∫: {url}")
            print(f"üîë Headers: {self.headers}")

            all_variants = []
            offset = 0
            
            async with aiohttp.ClientSession() as session:
                while True:
                    params['offset'] = offset
                    
                    async with session.get(url, headers=self.headers, params=params) as response:
                        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π (offset={offset}): {response.status}")

                        if response.status == 200:
                            data = await response.json()
                            variants = data.get('rows', [])
                            
                            if not variants:
                                break
                            
                            all_variants.extend(variants)
                            print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –≤ —ç—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ: {len(variants)}")
                            
                            if len(variants) < 1000:
                                break
                            
                            offset += 1000
                        else:
                            error_text = await response.text()
                            print(f"‚ùå –û—à–∏–±–∫–∞ API –ú–æ–π–°–∫–ª–∞–¥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {response.status}")
                            print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
                            break

            print(f"üì¶ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {len(all_variants)}")
            
            if all_variants:
                first_item = all_variants[0]
                print(f"üîç –ü–µ—Ä–≤–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è: {first_item.get('name', 'Unknown')}")
            
            return all_variants

        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {e}")
            import traceback
            traceback.print_exc()
            return []

    async def _get_stock_all(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ /report/stock/all"""
        print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...")
        
        if not self.api_token:
            print("‚ö†Ô∏è API —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return []

        try:
            url = f"{self.base_url}/report/stock/all"
            params = {
                'limit': 1000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞ –∑–∞–ø—Ä–æ—Å
            }
            
            print(f"üì° –ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞—Ç–∫–æ–≤ –∫: {url}")
            print(f"üîë Headers: {self.headers}")

            all_stock = []
            offset = 0
            
            async with aiohttp.ClientSession() as session:
                while True:
                    params['offset'] = offset
                    
                    async with session.get(url, headers=self.headers, params=params) as response:
                        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ (offset={offset}): {response.status}")

                        if response.status == 200:
                            data = await response.json()
                            stock_items = data.get('rows', [])
                            
                            if not stock_items:
                                break
                            
                            all_stock.extend(stock_items)
                            print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ —ç—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ: {len(stock_items)}")
                            
                            if len(stock_items) < 1000:
                                break
                            
                            offset += 1000
                        else:
                            error_text = await response.text()
                            print(f"‚ùå –û—à–∏–±–∫–∞ API –ú–æ–π–°–∫–ª–∞–¥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {response.status}")
                            print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
                            break

            print(f"üì¶ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(all_stock)}")
            
            if all_stock:
                first_item = all_stock[0]
                print(f"üîç –ü–µ—Ä–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {first_item.get('name', 'Unknown')}")
            
            return all_stock

        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            return []

    async def _merge_products_with_variants_and_stock(self, products_data, variants_data, stock_data):
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏ –∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏"""
        print("üîó –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏ –∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ ID (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        stock_dict = {}
        total_positive_stock = 0
        
        for stock_item in stock_data:
            try:
                # –í /report/stock/all –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–µ 'meta' —Å href
                meta_href = stock_item.get('meta', {}).get('href', '')
                if meta_href:
                    item_id = meta_href.split('/')[-1].split('?')[0]
                    
                    # –í /report/stock/all –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–µ 'quantity'
                    quantity = stock_item.get('quantity', 0)
                    
                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if quantity > 0:
                        stock_dict[item_id] = quantity
                        total_positive_stock += quantity
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞—Ç–∫–∞: {e}")
                continue
        
        print(f"üìã –°–æ–∑–¥–∞–Ω —Å–ª–æ–≤–∞—Ä—å –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(stock_dict)} –ø–æ–∑–∏—Ü–∏–π")
        print(f"üìä –û–±—â–∏–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π stock: {total_positive_stock}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —Ç–æ–≤–∞—Ä–∞–º
        variants_by_product = {}
        for variant in variants_data:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ meta.href
                product_id = None
                if variant.get('product'):
                    if isinstance(variant['product'], dict) and variant['product'].get('id'):
                        # –ï—Å–ª–∏ product —É–∂–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç (—Å expand)
                        product_id = variant['product']['id']
                    elif isinstance(variant['product'], dict) and variant['product'].get('meta', {}).get('href'):
                        # –ï—Å–ª–∏ product —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ meta
                        meta_href = variant['product']['meta']['href']
                        product_id = meta_href.split('/')[-1].split('?')[0]
                
                if product_id:
                    if product_id not in variants_by_product:
                        variants_by_product[product_id] = []
                    variants_by_product[product_id].append(variant)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                continue
        
        print(f"üìã –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –ø–æ —Ç–æ–≤–∞—Ä–∞–º: {len(variants_by_product)}")
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        result_products = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
        for product in products_data:
            try:
                product_id = product.get('id')
                if not product_id:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                variants = variants_by_product.get(product_id, [])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ pathName
                category = 'other'
                if product.get('pathName'):
                    category = product['pathName']
                elif product.get('productFolder') and product['productFolder'].get('name'):
                    category = product['productFolder']['name']
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ —Ü–≤–µ—Ç–∞ –∏–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
                available_sizes = []
                available_colors = []
                total_stock = 0
                
                # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å—á–∏—Ç–∞–µ–º stock –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
                if variants:
                    for variant in variants:
                        variant_id = variant.get('id')
                        variant_stock = stock_dict.get(variant_id, 0)
                        total_stock += variant_stock
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                        if variant.get('characteristics'):
                            for char in variant['characteristics']:
                                char_name = char.get('name', '').lower()
                                char_value = char.get('value', '')
                                
                                if '—Ä–∞–∑–º–µ—Ä' in char_name or 'size' in char_name:
                                    if self._is_valid_size(char_value) and char_value not in available_sizes:
                                        available_sizes.append(char_value)
                                elif '—Ü–≤–µ—Ç' in char_name or 'color' in char_name:
                                    if self._is_valid_color(char_value) and char_value not in available_colors:
                                        available_colors.append(char_value)
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
                    if not available_sizes and not available_colors:
                        for variant in variants:
                            name_modifications = self._extract_modifications(variant.get('name', ''))
                            if name_modifications.get('size') and name_modifications['size'] not in available_sizes:
                                available_sizes.append(name_modifications['size'])
                            if name_modifications.get('color') and name_modifications['color'] not in available_colors:
                                available_colors.append(name_modifications['color'])
                else:
                    # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –±–µ—Ä–µ–º stock —Å–∞–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    total_stock = stock_dict.get(product_id, 0)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –ø–µ—Ä–≤–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –∏–∑ —Ç–æ–≤–∞—Ä–∞
                price = 0
                if variants and variants[0].get('salePrices') and variants[0]['salePrices']:
                    price = variants[0]['salePrices'][0].get('value', 0) / 100
                elif product.get('salePrices') and product['salePrices']:
                    price = product['salePrices'][0].get('value', 0) / 100
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                result_product = {
                    'id': product.get('name', ''),
                    'original_id': product_id,
                    'name': product.get('name', ''),
                    'description': product.get('description', ''),
                    'article': product.get('article', ''),
                    'price': int(price),
                    'image': None,
                    'stock': int(total_stock),
                    'category': category,
                    'modifications_text': f"–í –Ω–∞–ª–∏—á–∏–∏: {int(total_stock)}",
                    'available_colors': available_colors,
                    'available_sizes': available_sizes,
                    'variants': []  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–æ–≤–∞—Ä
                for variant in variants:
                    variant_id = variant.get('id')
                    variant_stock = stock_dict.get(variant_id, 0)
                    
                    variant_data = {
                        'id': variant_id,
                        'name': variant.get('name', ''),
                        'stock': int(variant_stock),
                        'price': int(price),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
                        'sizes': [],
                        'colors': []
                    }
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    if variant.get('characteristics'):
                        for char in variant['characteristics']:
                            char_name = char.get('name', '').lower()
                            char_value = char.get('value', '')
                            
                            if '—Ä–∞–∑–º–µ—Ä' in char_name or 'size' in char_name:
                                if self._is_valid_size(char_value):
                                    variant_data['sizes'].append(char_value)
                            elif '—Ü–≤–µ—Ç' in char_name or 'color' in char_name:
                                if self._is_valid_color(char_value):
                                    variant_data['colors'].append(char_value)
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                    if not variant_data['sizes'] and not variant_data['colors']:
                        name_modifications = self._extract_modifications(variant.get('name', ''))
                        if name_modifications.get('size'):
                            variant_data['sizes'].append(name_modifications['size'])
                        if name_modifications.get('color'):
                            variant_data['colors'].append(name_modifications['color'])
                    
                    result_product['variants'].append(variant_data)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ "–ë—Ä–∞–∫"
                if not available_sizes and not available_colors:
                    result_product['category'] = '–ë—Ä–∞–∫'
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                if self._has_images(product):
                    image_url = await self._get_product_images(product)
                    result_product['image'] = image_url
                else:
                    result_product['image'] = None
                
                result_products.append(result_product)

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                continue
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(result_products)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π stock
        total_result_stock = sum(product.get('stock', 0) for product in result_products)
        print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π stock –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤: {total_result_stock}")
        print(f"üìä –û–∂–∏–¥–∞–µ–º—ã–π stock: {total_positive_stock}")
        print(f"üìä –†–∞–∑–Ω–∏—Ü–∞: {total_positive_stock - total_result_stock}")
        
        return result_products

    def _has_images(self, product: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É —Ç–æ–≤–∞—Ä–∞"""
        if not product.get('images'):
            return False
        
        images = product['images']
        if not isinstance(images, dict):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º size –≤ meta
        meta = images.get('meta', {})
        return meta.get('size', 0) > 0

    async def _get_product_images(self, product: dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É API endpoint —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not self._has_images(product):
            return None
        
        try:
            images_href = product['images']['meta']['href']
            product_name = product.get('name', 'Unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            cache_key = f"{product.get('id', 'unknown')}_{images_href}"
            if self._is_image_cache_valid(cache_key):
                cached_url = self._images_cache[cache_key]['proxy_url']
                print(f"‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}")
                return cached_url
            
            print(f"üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(images_href, headers=self.headers) as response:
                    if response.status == 200:
                        images_data = await response.json()
                        
                        if images_data.get('rows'):
                            first_image = images_data['rows'][0]
                            download_href = first_image.get('meta', {}).get('downloadHref')
                            
                            if download_href:
                                image_id = download_href.split('/')[-1]
                                proxy_url = f"/proxy/image/{image_id}"
                                
                                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                self._images_cache[cache_key] = {
                                    'proxy_url': proxy_url,
                                    'timestamp': time.time(),
                                    'image_id': image_id
                                }
                                
                                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ: {proxy_url}")
                                return proxy_url
            
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞")
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return None

    def _determine_category_by_name(self, product_name):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞"""
        name_lower = product_name.lower()
        
        # –°–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_keywords = {
            '–î–∂–∏–Ω—Å—ã': ['–¥–∂–∏–Ω—Å—ã', 'jeans'],
            '–ë—Ä—é–∫–∏': ['–±—Ä—é–∫–∏', 'pants', 'trousers'],
            '–Æ–±–∫–∏': ['—é–±–∫–∞', '—é–±–∫–∏', 'skirt'],
            '–ü–ª–∞—Ç—å–µ': ['–ø–ª–∞—Ç—å–µ', '–ø–ª–∞—Ç—å—è', 'dress'],
            '–¢–æ–ø—ã': ['—Ç–æ–ø', '—Ç–æ–ø—ã', 'top'],
            '–ë–ª—É–∑–∫–∞': ['–±–ª—É–∑–∫–∞', '–±–ª—É–∑–∫–∏', 'blouse'],
            '–†—É–±–∞—à–∫–∞': ['—Ä—É–±–∞—à–∫–∞', '—Ä—É–±–∞—à–∫–∏', 'shirt'],
            '–î–∂–µ–º–ø–µ—Ä': ['–¥–∂–µ–º–ø–µ—Ä', '–¥–∂–µ–º–ø–µ—Ä—ã', 'jumper'],
            '–°–≤–∏—Ç–µ—Ä': ['—Å–≤–∏—Ç–µ—Ä', '—Å–≤–∏—Ç–µ—Ä–∞', 'sweater'],
            '–ö–∞—Ä–¥–∏–≥–∞–Ω': ['–∫–∞—Ä–¥–∏–≥–∞–Ω', 'cardigan'],
            '–ñ–∞–∫–µ—Ç': ['–∂–∞–∫–µ—Ç', '–∂–∞–∫–µ—Ç—ã', 'jacket'],
            '–ü–∏–¥–∂–∞–∫': ['–ø–∏–¥–∂–∞–∫', '–ø–∏–¥–∂–∞–∫–∏', 'blazer'],
            '–ö–æ—Å—Ç—é–º': ['–∫–æ—Å—Ç—é–º', '–∫–æ—Å—Ç—é–º—ã', 'suit'],
            '–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞': ['–∫—É—Ä—Ç–∫–∞', '–∫—É—Ä—Ç–∫–∏', '–ø–∞–ª—å—Ç–æ', 'coat', 'jacket'],
            '–§—É—Ç–±–æ–ª–∫–∏': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ñ—É—Ç–±–æ–ª–∫–∏', 't-shirt', 'tshirt'],
            '–ü–æ–ª–æ': ['–ø–æ–ª–æ', 'polo'],
            '–•—É–¥–∏': ['—Ö—É–¥–∏', 'hoodie'],
            '–°–≤–∏—Ç—à–æ—Ç': ['—Å–≤–∏—Ç—à–æ—Ç', 'sweatshirt'],
            '–õ–æ–Ω–≥—Å–ª–∏–≤': ['–ª–æ–Ω–≥—Å–ª–∏–≤', 'longsleeve'],
            '–í–æ–¥–æ–ª–∞–∑–∫–∏': ['–≤–æ–¥–æ–ª–∞–∑–∫–∞', '–≤–æ–¥–æ–ª–∞–∑–∫–∏', 'turtleneck'],
            '–ë–æ–¥–∏': ['–±–æ–¥–∏', 'body'],
            '–õ–æ—Å–∏–Ω—ã': ['–ª–æ—Å–∏–Ω—ã', 'leggings'],
            '–®–æ—Ä—Ç—ã': ['—à–æ—Ä—Ç—ã', 'shorts'],
            '–ö–æ–º–ø–ª–µ–∫—Ç': ['–∫–æ–º–ø–ª–µ–∫—Ç', '–∫–æ–º–ø–ª–µ–∫—Ç—ã', 'set'],
            '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã': ['—Ä–µ–º–µ–Ω—å', '—Ä–µ–º–Ω–∏', 'belt', '—Å—É–º–∫–∞', '—Å—É–º–∫–∏', 'bag', '—à–∞—Ä—Ñ', '—à–∞—Ä—Ñ—ã', 'scarf'],
            '–ë–ª—É–∑–æ–Ω': ['–±–ª—É–∑–æ–Ω', 'blouson'],
            '–ñ–∏–ª–µ—Ç': ['–∂–∏–ª–µ—Ç', '–∂–∏–ª–µ—Ç—ã', 'vest']
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for category, keywords in category_keywords.items():
            for keyword in keywords:
                if keyword in name_lower:
                    return category
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "other"
        return "other"

    def _extract_modifications(self, name):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π (—Ä–∞–∑–º–µ—Ä –∏ —Ü–≤–µ—Ç) –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        modifications = {'size': None, 'color': None}
        
        # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ —Å–∫–æ–±–∫–∞—Ö –∏–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        size_patterns = [
            r'\((\d{2,3})\)',  # (42), (44), (46)
            r',\s*(\d{2,3})\s*\)',  # , 42), , 44)
            r'—Ä–∞–∑–º–µ—Ä\s*(\d{2,3})',  # —Ä–∞–∑–º–µ—Ä 42
            r'(\d{2,3})\s*—Ä–∞–∑–º–µ—Ä',  # 42 —Ä–∞–∑–º–µ—Ä
            r'\b(\d{2,3})\b',  # –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ 42, 44, 46
            r'\b(XS|S|M|L|XL|XXL)\b',  # –±—É–∫–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            r'\b(One\s*Size|OS|one\s*size|os)\b'  # One Size
        ]
        
        # –ò—â–µ–º —Ü–≤–µ—Ç–∞
        color_patterns = [
            r'\(([^)]*?(?:–±–µ–ª—ã–π|—á–µ—Ä–Ω—ã–π|–∫—Ä–∞—Å–Ω—ã–π|—Å–∏–Ω–∏–π|–∑–µ–ª–µ–Ω—ã–π|–∂–µ–ª—Ç—ã–π|—Ä–æ–∑–æ–≤—ã–π|–æ—Ä–∞–Ω–∂–µ–≤—ã–π|—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π|–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π|—Å–µ—Ä—ã–π|–≥–æ–ª—É–±–æ–π|–±–µ–∂–µ–≤—ã–π|–±–æ—Ä–¥–æ–≤—ã–π|—Ö–∞–∫–∏|—à–æ–∫–æ–ª–∞–¥|–∫—Ä–µ–º|–º–æ–ª–æ—á–Ω—ã–π|–≤–∞–Ω–∏–ª—å|–∞–ª—ã–π|–ª–∏–ª–æ–≤—ã–π|—Å–∞–ª–∞—Ç–æ–≤—ã–π|–±—Ä–æ–Ω–∑–æ–≤—ã–π)[^)]*?)\)',
            r',\s*([^)]*?(?:–±–µ–ª—ã–π|—á–µ—Ä–Ω—ã–π|–∫—Ä–∞—Å–Ω—ã–π|—Å–∏–Ω–∏–π|–∑–µ–ª–µ–Ω—ã–π|–∂–µ–ª—Ç—ã–π|—Ä–æ–∑–æ–≤—ã–π|–æ—Ä–∞–Ω–∂–µ–≤—ã–π|—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π|–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π|—Å–µ—Ä—ã–π|–≥–æ–ª—É–±–æ–π|–±–µ–∂–µ–≤—ã–π|–±–æ—Ä–¥–æ–≤—ã–π|—Ö–∞–∫–∏|—à–æ–∫–æ–ª–∞–¥|–∫—Ä–µ–º|–º–æ–ª–æ—á–Ω—ã–π|–≤–∞–Ω–∏–ª—å|–∞–ª—ã–π|–ª–∏–ª–æ–≤—ã–π|—Å–∞–ª–∞—Ç–æ–≤—ã–π|–±—Ä–æ–Ω–∑–æ–≤—ã–π)[^)]*?)\s*\)',
            r'\b(–±–µ–ª—ã–π|—á–µ—Ä–Ω—ã–π|–∫—Ä–∞—Å–Ω—ã–π|—Å–∏–Ω–∏–π|–∑–µ–ª–µ–Ω—ã–π|–∂–µ–ª—Ç—ã–π|—Ä–æ–∑–æ–≤—ã–π|–æ—Ä–∞–Ω–∂–µ–≤—ã–π|—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π|–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π|—Å–µ—Ä—ã–π|–≥–æ–ª—É–±–æ–π|–±–µ–∂–µ–≤—ã–π|–±–æ—Ä–¥–æ–≤—ã–π|—Ö–∞–∫–∏|—à–æ–∫–æ–ª–∞–¥|–∫—Ä–µ–º|–º–æ–ª–æ—á–Ω—ã–π|–≤–∞–Ω–∏–ª—å|–∞–ª—ã–π|–ª–∏–ª–æ–≤—ã–π|—Å–∞–ª–∞—Ç–æ–≤—ã–π|–±—Ä–æ–Ω–∑–æ–≤—ã–π)\b',
            r'\b(White|Black|Red|Blue|Green|Yellow|Pink|Orange|Purple|Brown|Grey|Gray|Cream|Beige|Burgundy|Khaki|Chocolate|Milk|Vanilla|Scarlet|Lilac|Lime|Bronze)\b'
        ]
        
        import re
        
        # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä
        for pattern in size_patterns:
            match = re.search(pattern, name, re.IGNORECASE)
            if match:
                size = match.group(1).strip()
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
                if self._is_valid_size(size):
                    modifications['size'] = size
                    break
        
        # –ò—â–µ–º —Ü–≤–µ—Ç
        for pattern in color_patterns:
            match = re.search(pattern, name, re.IGNORECASE)
            if match:
                color = match.group(1).strip()
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–≤–µ—Ç–∞
                if self._is_valid_color(color):
                    modifications['color'] = color
                    break
        
        return modifications

    def _is_valid_size(self, size):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–∞"""
        if not size:
            return False
        
        size_lower = size.lower()
        
        # –í–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        valid_sizes = [
            'xs', 's', 'm', 'l', 'xl', 'xxl', 'xxxl',
            'one size', 'os', 'one size',
            '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39',
            '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52'
        ]
        
        return size_lower in valid_sizes

    def _is_valid_color(self, color):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞"""
        if not color:
            return False
        
        color_lower = color.lower()
        
        # –í–∞–ª–∏–¥–Ω—ã–µ —Ü–≤–µ—Ç–∞
        valid_colors = [
            '–±–µ–ª—ã–π', '—á–µ—Ä–Ω—ã–π', '–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∑–µ–ª–µ–Ω—ã–π', '–∂–µ–ª—Ç—ã–π', '—Ä–æ–∑–æ–≤—ã–π', 
            '–æ—Ä–∞–Ω–∂–µ–≤—ã–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '—Å–µ—Ä—ã–π', '–≥–æ–ª—É–±–æ–π', '–±–µ–∂–µ–≤—ã–π', 
            '–±–æ—Ä–¥–æ–≤—ã–π', '—Ö–∞–∫–∏', '—à–æ–∫–æ–ª–∞–¥', '–∫—Ä–µ–º', '–º–æ–ª–æ—á–Ω—ã–π', '–≤–∞–Ω–∏–ª—å', '–∞–ª—ã–π', 
            '–ª–∏–ª–æ–≤—ã–π', '—Å–∞–ª–∞—Ç–æ–≤—ã–π', '–±—Ä–æ–Ω–∑–æ–≤—ã–π', '—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π', '—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π',
            'white', 'black', 'red', 'blue', 'green', 'yellow', 'pink', 'orange', 
            'purple', 'brown', 'grey', 'gray', 'cream', 'beige', 'burgundy', 'khaki', 
            'chocolate', 'milk', 'vanilla', 'scarlet', 'lilac', 'lime', 'bronze'
        ]
        
        return color_lower in valid_colors

    async def get_categories(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ú–æ–π–°–∫–ª–∞–¥"""
        print("üîç –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ú–æ–π–°–∫–ª–∞–¥...")
        
        if not self.api_token:
            print("‚ö†Ô∏è API —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return self._get_test_categories()

        try:
            url = f"{self.base_url}/entity/productfolder"
            params = {'limit': 1000, 'offset': 0}
            
            print(f"üì° –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫: {url}")
            print(f"üîë Headers: {self.headers}")
            print(f"üìù Params: {params}")

            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=self.headers, params=params) as response:
                    print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status}")

                    if response.status == 200:
                        data = await response.json()
                        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(data.get('rows', []))}")
                        print(f"üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {list(data.keys())}")
                        
                        if data.get('rows'):
                            first_item = data['rows'][0]
                            print(f"üîç –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {first_item}")
                        
                        categories = []
                        for item in data.get('rows', []):
                            categories.append({
                                'id': item.get('id'),
                                'name': item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            })
                        
                        return categories
                    else:
                        error_text = await response.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ API –ú–æ–π–°–∫–ª–∞–¥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status}")
                        print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
                        return self._get_test_categories()

        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            import traceback
            traceback.print_exc()
            return self._get_test_categories()

    async def get_product_by_id(self, product_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID"""
        print(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID: {product_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –∏—â–µ–º –Ω—É–∂–Ω—ã–π
            products = await self.get_products(limit=1000, offset=0)
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID
            for product in products:
                if product.get('original_id') == product_id:
                    print(f"‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {product.get('name')}")
                    return product
            
            print(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID: {product_id}")
            return None
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
            return None

    def _get_test_categories(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        return [
            {'id': 'cat_1', 'name': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'},
            {'id': 'cat_2', 'name': '–û–¥–µ–∂–¥–∞'},
            {'id': 'cat_3', 'name': '–û–±—É–≤—å'},
            {'id': 'cat_4', 'name': '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'}
        ]

    def _get_test_products(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        return [
            {
                'id': 'test_1',
                'name': '–°–º–∞—Ä—Ç—Ñ–æ–Ω iPhone 15',
                'description': '–ù–æ–≤–µ–π—à–∏–π iPhone —Å –æ—Ç–ª–∏—á–Ω–æ–π –∫–∞–º–µ—Ä–æ–π',
                'price': 89990.0,
                'image': None,
                'stock': 10,
                'category': 'electronics'
            },
            {
                'id': 'test_2',
                'name': '–ù–æ—É—Ç–±—É–∫ MacBook Air',
                'description': '–õ–µ–≥–∫–∏–π –∏ –º–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫',
                'price': 129990.0,
                'image': None,
                'stock': 5,
                'category': 'electronics'
            }
        ]
