#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import hashlib
import aiohttp
import asyncio
from datetime import datetime, timedelta
import json
from typing import Optional, Dict, Any

class ImageCache:
    def __init__(self, cache_dir: str = "image_cache", max_age_hours: int = 24):
        self.cache_dir = cache_dir
        self.max_age_hours = max_age_hours
        self.cache_index_file = os.path.join(cache_dir, "cache_index.json")
        self.cache_index = {}
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫—ç—à–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(cache_dir, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫—ç—à–∞
        self._load_cache_index()
    
    def _load_cache_index(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫—ç—à–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.cache_index_file):
                with open(self.cache_index_file, 'r', encoding='utf-8') as f:
                    self.cache_index = json.load(f)
                print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω –∏–Ω–¥–µ–∫—Å –∫—ç—à–∞: {len(self.cache_index)} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–∞ –∫—ç—à–∞: {e}")
            self.cache_index = {}
    
    def _save_cache_index(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –∫—ç—à–∞ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.cache_index_file, 'w', encoding='utf-8') as f:
                json.dump(self.cache_index, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∫—ç—à–∞: {e}")
    
    def _get_cache_key(self, image_url: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return hashlib.md5(image_url.encode()).hexdigest()
    
    def _get_cache_path(self, cache_key: str) -> str:
        """–ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞"""
        return os.path.join(self.cache_dir, f"{cache_key}.jpg")
    
    def _is_cache_valid(self, cache_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ –∫—ç—à"""
        if cache_key not in self.cache_index:
            return False
        
        cache_info = self.cache_index[cache_key]
        cache_time = datetime.fromisoformat(cache_info['timestamp'])
        max_age = timedelta(hours=self.max_age_hours)
        
        return datetime.now() - cache_time < max_age
    
    async def get_cached_image(self, image_url: str, auth_headers: dict = None) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ"""
        cache_key = self._get_cache_key(image_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫—ç—à–µ
        if self._is_cache_valid(cache_key):
            cache_path = self._get_cache_path(cache_key)
            if os.path.exists(cache_path):
                print(f"üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: {image_url}")
                return f"/cache/{cache_key}.jpg"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return await self._download_and_cache_image(image_url, cache_key, auth_headers)
    
    async def _download_and_cache_image(self, image_url: str, cache_key: str, auth_headers: dict = None) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à"""
        try:
            print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            headers = {}
            if auth_headers:
                headers.update(auth_headers)
            
            async with aiohttp.ClientSession() as session:
                async with session.get(image_url, headers=headers) as response:
                    if response.status == 200:
                        image_data = await response.read()
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫—ç—à
                        cache_path = self._get_cache_path(cache_key)
                        with open(cache_path, 'wb') as f:
                            f.write(image_data)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫—ç—à–∞
                        self.cache_index[cache_key] = {
                            'url': image_url,
                            'timestamp': datetime.now().isoformat(),
                            'size': len(image_data),
                            'path': cache_path
                        }
                        self._save_cache_index()
                        
                        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {len(image_data)} –±–∞–π—Ç")
                        return f"/cache/{cache_key}.jpg"
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
                        return image_url
                        
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
            return image_url
    
    def clear_expired_cache(self):
        """–û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞"""
        expired_keys = []
        current_time = datetime.now()
        max_age = timedelta(hours=self.max_age_hours)
        
        for cache_key, cache_info in self.cache_index.items():
            cache_time = datetime.fromisoformat(cache_info['timestamp'])
            if current_time - cache_time > max_age:
                expired_keys.append(cache_key)
        
        for cache_key in expired_keys:
            cache_path = self._get_cache_path(cache_key)
            if os.path.exists(cache_path):
                os.remove(cache_path)
            del self.cache_index[cache_key]
        
        if expired_keys:
            self._save_cache_index()
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(expired_keys)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞")
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        total_size = sum(info.get('size', 0) for info in self.cache_index.values())
        return {
            'total_entries': len(self.cache_index),
            'total_size_bytes': total_size,
            'total_size_mb': round(total_size / (1024 * 1024), 2),
            'cache_dir': self.cache_dir
        }
