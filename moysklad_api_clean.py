import aiohttp
import time
import re
from typing import List, Dict, Any, Optional

class MoySkladAPI:
    def __init__(self, api_token: str = None):
        self.api_token = api_token
        self.base_url = "https://api.moysklad.ru/api/remap/1.2"
        self.headers = {
            'Authorization': f'Bearer {api_token}' if api_token else '',
            'Accept': 'application/json;charset=utf-8',
            'Accept-Encoding': 'gzip'
        }
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._products_cache = []
        self._cache_timestamp = 0
        self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from database import Database
        self.db = Database()

    def _is_cache_valid(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
        return (time.time() - self._cache_timestamp) < self._cache_ttl

    def _get_cached_products(self, limit: int, offset: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫—ç—à–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        start = offset
        end = offset + limit
        return self._products_cache[start:end]

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        self._products_cache = []
        self._cache_timestamp = 0
        print("üóëÔ∏è –ö—ç—à —Ç–æ–≤–∞—Ä–æ–≤ –æ—á–∏—â–µ–Ω")

    def force_refresh_products(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        self.clear_cache()
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ç–æ–≤–∞—Ä–æ–≤")

    async def get_products(self, limit=50, offset=0):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print(f"üîç –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤: limit={limit}, offset={offset}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if self._is_cache_valid():
            print(f"‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à —Ç–æ–≤–∞—Ä–æ–≤ (–≤–æ–∑—Ä–∞—Å—Ç: {int(time.time() - self._cache_timestamp)}—Å)")
            return self._get_cached_products(limit, offset)
        
        print("üîÑ –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            stock_data = await self._get_stock_data()
            print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(stock_data)} –ø–æ–∑–∏—Ü–∏–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
            products_data = await self._get_products_data()
            print(f"üõçÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products_data)} –ø–æ–∑–∏—Ü–∏–π")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            products = self._merge_stock_and_products(stock_data, products_data)
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._products_cache = products
            self._cache_timestamp = time.time()
            print(f"üíæ –¢–æ–≤–∞—Ä—ã –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã ({len(products)} —à—Ç.)")
            
            return self._get_cached_products(limit, offset)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            return self._get_test_products()

    async def _get_stock_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ /report/stock/bystore/current"""
        print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...")
        
        if not self.api_token:
            print("‚ö†Ô∏è API —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return []

        try:
            url = f"{self.base_url}/report/stock/bystore/current"
            
            print(f"üì° –ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞—Ç–∫–æ–≤ –∫: {url}")
            print(f"üîë Headers: {self.headers}")

            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=self.headers) as response:
                    print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")

                    if response.status == 200:
                        data = await response.json()
                        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(data.get('rows', []))} —Ç–æ–≤–∞—Ä–æ–≤")
                        print(f"üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
                        
                        if data.get('rows'):
                            first_item = data['rows'][0]
                            print(f"üîç –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {first_item}")
                        
                        return data.get('rows', [])
                    else:
                        error_text = await response.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ API –ú–æ–π–°–∫–ª–∞–¥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {response.status}")
                        print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
                        return []

        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            return []

    async def _get_products_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ /entity/product"""
        print("üõçÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö...")
        
        if not self.api_token:
            print("‚ö†Ô∏è API —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return []

        try:
            url = f"{self.base_url}/entity/product"
            params = {'limit': 1000, 'offset': 0}
            
            print(f"üì° –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ –∫: {url}")
            print(f"üîë Headers: {self.headers}")
            print(f"üìù Params: {params}")

            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=self.headers, params=params) as response:
                    print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤: {response.status}")

                    if response.status == 200:
                        data = await response.json()
                        print(f"üõçÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(data.get('rows', []))} –ø–æ–∑–∏—Ü–∏–π")
                        print(f"üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤: {list(data.keys())}")
                        
                        if data.get('rows'):
                            first_item = data['rows'][0]
                            print(f"üîç –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {first_item}")
                        
                        return data.get('rows', [])
                    else:
                        error_text = await response.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ API –ú–æ–π–°–∫–ª–∞–¥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {response.status}")
                        print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
                        return []

        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            return []

    def _merge_stock_and_products(self, stock_data, products_data):
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –∏ —Ç–æ–≤–∞—Ä–∞—Ö"""
        print("üîó –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –∏ —Ç–æ–≤–∞—Ä–∞—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ID
        products_dict = {}
        for product in products_data:
            product_id = product.get('id')
            if product_id:
                products_dict[product_id] = product
        
        print(f"üìã –°–æ–∑–¥–∞–Ω —Å–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤: {len(products_dict)} –ø–æ–∑–∏—Ü–∏–π")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        result_products = []
        
        for stock_item in stock_data:
            try:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                product_id = stock_item.get('meta', {}).get('href', '').split('/')[-1].split('?')[0]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                product_info = products_dict.get(product_id)
                
                if not product_info:
                    print(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {product_id}")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
                stock = stock_item.get('stock', 0)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                if stock <= 0:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
                price = 0
                if stock_item.get('salePrice'):
                    price = stock_item['salePrice'] / 100
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = 'other'
                if product_info.get('productFolder') and product_info['productFolder'].get('name'):
                    category = product_info['productFolder']['name']
                
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
                product = {
                    'id': product_info.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'original_id': product_id,
                    'name': product_info.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'description': product_info.get('description', ''),
                    'article': product_info.get('article', ''),
                    'price': int(price),
                    'image': None,
                    'stock': int(stock),
                    'category': category,
                    'modifications_text': f"–í –Ω–∞–ª–∏—á–∏–∏: {int(stock)}",
                    'available_colors': [],
                    'available_sizes': []
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                if product_info.get('images') and product_info['images'].get('rows'):
                    image = product_info['images']['rows'][0]
                    if image.get('meta', {}).get('downloadHref'):
                        download_url = image['meta']['downloadHref']
                        if '/download/' in download_url:
                            image_id = download_url.split('/')[-1]
                            product['image'] = f"/proxy/image/{image_id}"
                
                result_products.append(product)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                continue
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(result_products)}")
        return result_products

    async def get_categories(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ú–æ–π–°–∫–ª–∞–¥"""
        print("üîç –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ú–æ–π–°–∫–ª–∞–¥...")
        
        if not self.api_token:
            print("‚ö†Ô∏è API —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return self._get_test_categories()

        try:
            url = f"{self.base_url}/entity/productfolder"
            params = {'limit': 1000, 'offset': 0}
            
            print(f"üì° –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫: {url}")
            print(f"üîë Headers: {self.headers}")
            print(f"üìù Params: {params}")

            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=self.headers, params=params) as response:
                    print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status}")

                    if response.status == 200:
                        data = await response.json()
                        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(data.get('rows', []))}")
                        print(f"üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {list(data.keys())}")
                        
                        if data.get('rows'):
                            first_item = data['rows'][0]
                            print(f"üîç –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {first_item}")
                        
                        categories = []
                        for item in data.get('rows', []):
                            categories.append({
                                'id': item.get('id'),
                                'name': item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            })
                        
                        return categories
                    else:
                        error_text = await response.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ API –ú–æ–π–°–∫–ª–∞–¥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {response.status}")
                        print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
                        return self._get_test_categories()

        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            import traceback
            traceback.print_exc()
            return self._get_test_categories()

    async def get_product_by_id(self, product_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID"""
        print(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID: {product_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –∏—â–µ–º –Ω—É–∂–Ω—ã–π
            products = await self.get_products(limit=1000, offset=0)
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID
            for product in products:
                if product.get('original_id') == product_id:
                    print(f"‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {product.get('name')}")
                    return product
            
            print(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID: {product_id}")
            return None
            
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
            return None

    def _get_test_categories(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        return [
            {'id': 'cat_1', 'name': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'},
            {'id': 'cat_2', 'name': '–û–¥–µ–∂–¥–∞'},
            {'id': 'cat_3', 'name': '–û–±—É–≤—å'},
            {'id': 'cat_4', 'name': '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'}
        ]

    def _get_test_products(self):
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        return [
            {
                'id': 'test_1',
                'name': '–°–º–∞—Ä—Ç—Ñ–æ–Ω iPhone 15',
                'description': '–ù–æ–≤–µ–π—à–∏–π iPhone —Å –æ—Ç–ª–∏—á–Ω–æ–π –∫–∞–º–µ—Ä–æ–π',
                'price': 89990.0,
                'image': None,
                'stock': 10,
                'category': 'electronics'
            },
            {
                'id': 'test_2',
                'name': '–ù–æ—É—Ç–±—É–∫ MacBook Air',
                'description': '–õ–µ–≥–∫–∏–π –∏ –º–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫',
                'price': 129990.0,
                'image': None,
                'stock': 5,
                'category': 'electronics'
            }
        ]
