import aiohttp
import asyncio
import json

async def debug_stock_source():
    api_token = "70ff03c8f6f33ae7b62744eb0af127b043de02fb"
    base_url = "https://api.moysklad.ru/api/remap/1.2"
    
    headers = {
        'Authorization': f'Bearer {api_token}',
        'Accept': 'application/json;charset=utf-8',
        'Accept-Encoding': 'gzip'
    }
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö stock –∏–∑ API –ú–æ–π–°–∫–ª–∞–¥...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    print("\nüìä –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...")
    stock_url = f"{base_url}/report/stock/bystore"
    stock_params = {'limit': 5}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(stock_url, headers=headers, params=stock_params) as response:
            if response.status == 200:
                stock_data = await response.json()
                stock_items = stock_data.get('rows', [])
                
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(stock_items)}")
                
                for i, stock_item in enumerate(stock_items):
                    print(f"\nüîç –û—Å—Ç–∞—Ç–æ–∫ {i+1}:")
                    print(f"üìÑ Meta href: {stock_item.get('meta', {}).get('href', 'N/A')}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ href
                    meta_href = stock_item.get('meta', {}).get('href', '')
                    if meta_href:
                        item_id = meta_href.split('/')[-1].split('?')[0]
                        print(f"üìÑ ID —Ç–æ–≤–∞—Ä–∞: {item_id}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º stockByStore
                    stock_by_store = stock_item.get('stockByStore', [])
                    print(f"üè™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–ª–∞–¥–æ–≤: {len(stock_by_store)}")
                    
                    total_stock = 0
                    for store_stock in stock_by_store:
                        store_name = store_stock.get('name', 'Unknown')
                        stock_value = store_stock.get('stock', 0)
                        total_stock += stock_value
                        print(f"  –°–∫–ª–∞–¥ '{store_name}': {stock_value}")
                    
                    print(f"üìä –û–±—â–∏–π stock: {total_stock}")
                    print("-" * 50)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {response.status}")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    print("\nüîÑ –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏...")
    variants_url = f"{base_url}/entity/variant"
    variants_params = {'limit': 5, 'expand': 'product'}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(variants_url, headers=headers, params=variants_params) as response:
            if response.status == 200:
                variants_data = await response.json()
                variants = variants_data.get('rows', [])
                
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {len(variants)}")
                
                for i, variant in enumerate(variants):
                    print(f"\nüîç –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è {i+1}:")
                    print(f"üìÑ ID: {variant.get('id')}")
                    print(f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {variant.get('name')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ç–æ–≤–∞—Ä–µ
                    if variant.get('product'):
                        product = variant['product']
                        print(f"üìÑ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–≤–∞—Ä: {product.get('name')} (ID: {product.get('id')})")
                    
                    print("-" * 50)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {response.status}")

if __name__ == "__main__":
    asyncio.run(debug_stock_source())
