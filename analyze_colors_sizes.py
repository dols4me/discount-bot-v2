#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
"""

import asyncio
import json
from moysklad_api import MoySkladAPI
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def analyze_colors_and_sizes():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –ú–æ–π–°–∫–ª–∞–¥"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
    moysklad = MoySkladAPI()
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ú–æ–π–°–∫–ª–∞–¥...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    products = await moysklad.get_products(limit=1000, offset=0)
    
    print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã
    all_colors = set()
    all_sizes = set()
    color_size_combinations = []
    
    for product in products:
        product_name = product.get('name', '')
        variants = product.get('variants', [])
        
        print(f"\nüîç –¢–æ–≤–∞—Ä: {product_name}")
        
        for variant in variants:
            variant_name = variant.get('name', '')
            variant_stock = variant.get('stock', 0)
            
            print(f"  üìã –í–∞—Ä–∏–∞–Ω—Ç: {variant_name} (–æ—Å—Ç–∞—Ç–æ–∫: {variant_stock})")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if variant.get('characteristics'):
                for char in variant['characteristics']:
                    char_name = char.get('name', '').lower()
                    char_value = char.get('value', '')
                    
                    if '—Ä–∞–∑–º–µ—Ä' in char_name or 'size' in char_name:
                        all_sizes.add(char_value)
                        print(f"    üìè –†–∞–∑–º–µ—Ä: '{char_value}' (–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)")
                    elif '—Ü–≤–µ—Ç' in char_name or 'color' in char_name:
                        all_colors.add(char_value)
                        print(f"    üé® –¶–≤–µ—Ç: '{char_value}' (–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            name_modifications = moysklad._extract_modifications(variant_name)
            if name_modifications.get('size'):
                all_sizes.add(name_modifications['size'])
                print(f"    üìè –†–∞–∑–º–µ—Ä: '{name_modifications['size']}' (–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)")
            if name_modifications.get('color'):
                all_colors.add(name_modifications['color'])
                print(f"    üé® –¶–≤–µ—Ç: '{name_modifications['color']}' (–∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            if name_modifications.get('color') and name_modifications.get('size'):
                color_size_combinations.append({
                    'product': product_name,
                    'variant': variant_name,
                    'color': name_modifications['color'],
                    'size': name_modifications['size'],
                    'stock': variant_stock
                })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    all_colors = sorted(list(all_colors))
    all_sizes = sorted(list(all_sizes))
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
    print(f"üìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: {len(all_colors)}")
    print(f"üìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤: {len(all_sizes)}")
    
    print(f"\nüé® –í–°–ï –¶–í–ï–¢–ê:")
    for i, color in enumerate(all_colors, 1):
        print(f"  {i:2d}. '{color}'")
    
    print(f"\nüìè –í–°–ï –†–ê–ó–ú–ï–†–´:")
    for i, size in enumerate(all_sizes, 1):
        print(f"  {i:2d}. '{size}'")
    
    print(f"\nüîó –ö–û–ú–ë–ò–ù–ê–¶–ò–ò –¶–í–ï–¢-–†–ê–ó–ú–ï–†:")
    for combo in color_size_combinations:
        print(f"  üé® {combo['color']} + üìè {combo['size']} = {combo['stock']} —à—Ç. ({combo['product']})")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
    result = {
        'total_products': len(products),
        'total_colors': len(all_colors),
        'total_sizes': len(all_sizes),
        'colors': all_colors,
        'sizes': all_sizes,
        'combinations': color_size_combinations
    }
    
    with open('colors_sizes_analysis.json', 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª 'colors_sizes_analysis.json'")
    
    return result

if __name__ == "__main__":
    asyncio.run(analyze_colors_and_sizes())
