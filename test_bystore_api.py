import aiohttp
import asyncio
import json

async def test_bystore_api():
    api_token = "70ff03c8f6f33ae7b62744eb0af127b043de02fb"
    base_url = "https://api.moysklad.ru/api/remap/1.2"
    
    headers = {
        'Authorization': f'Bearer {api_token}',
        'Accept': 'application/json;charset=utf-8',
        'Accept-Encoding': 'gzip'
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ (/report/stock/bystore)...")
    url = f"{base_url}/report/stock/bystore"
    params = {'limit': 5}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers, params=params) as response:
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
            
            if response.status == 200:
                data = await response.json()
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(data.get('rows', []))}")
                
                if data.get('rows'):
                    for i, stock in enumerate(data['rows'][:3]):
                        print(f"üîç –û—Å—Ç–∞—Ç–æ–∫ {i+1}:")
                        print(f"üìÑ –¢–æ–≤–∞—Ä: {stock.get('name', 'Unknown')}")
                        print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stock.get('stock', 0)}")
                        print(f"üè™ –°–∫–ª–∞–¥: {stock.get('store', 'Unknown')}")
                        print(f"üí∞ –¶–µ–Ω–∞: {stock.get('salePrice', 0)}")
                        print(f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {stock.get('folder', {}).get('name', '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}")
                        print("---")
                else:
                    print("üì¶ –û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                error_text = await response.text()
                print(f"‚ùå –û—à–∏–±–∫–∞: {error_text}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
    stores_url = f"{base_url}/entity/store"
    stores_params = {'limit': 2}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(stores_url, headers=headers, params=stores_params) as response:
            if response.status == 200:
                stores_data = await response.json()
                if stores_data.get('rows'):
                    store = stores_data['rows'][0]
                    store_id = store.get('id')
                    store_name = store.get('name', 'Unknown')
                    
                    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —Å–∫–ª–∞–¥–∞: {store_name} (ID: {store_id})")
                    
                    # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞
                    bystore_url = f"{base_url}/report/stock/bystore"
                    bystore_params = {
                        'store': store_id,
                        'limit': 3
                    }
                    
                    async with session.get(bystore_url, headers=headers, params=bystore_params) as bystore_response:
                        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥—É: {bystore_response.status}")
                        
                        if bystore_response.status == 200:
                            bystore_data = await bystore_response.json()
                            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ: {len(bystore_data.get('rows', []))}")
                            
                            if bystore_data.get('rows'):
                                for stock in bystore_data['rows']:
                                    print(f"üì¶ –¢–æ–≤–∞—Ä: {stock.get('name', 'Unknown')} - {stock.get('stock', 0)} —à—Ç.")
                            else:
                                print("üì¶ –û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        else:
                            error_text = await bystore_response.text()
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥—É: {error_text}")

if __name__ == "__main__":
    asyncio.run(test_bystore_api())
