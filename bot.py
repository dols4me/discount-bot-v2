import asyncio
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, WebAppInfo, MenuButton, MenuButtonWebApp
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

from config import TELEGRAM_BOT_TOKEN, SHOP_NAME, SHOP_DESCRIPTION, CURRENCY, WEBAPP_URL
from database import Database
from moysklad_api import MoySkladAPI
from keyboards import Keyboards

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ShopBot:
    def __init__(self):
        self.db = Database()
        self.moysklad = MoySkladAPI()
        self.user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è multi-step –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        self.db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Menu Button –¥–ª—è Web App
        if WEBAPP_URL != 'https://your-webapp-url.com':
            try:
                await context.bot.set_chat_menu_button(
                    chat_id=chat_id,
                    menu_button=MenuButtonWebApp(
                        text="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω",
                        web_app=WebAppInfo(url=WEBAPP_URL)
                    )
                )
            except Exception as e:
                logger.warning(f"Failed to set menu button: {e}")
        
        welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {SHOP_NAME}!

{SHOP_DESCRIPTION}

üåê –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≤–µ–±-–∫–∞—Ç–∞–ª–æ–≥
üì± –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=Keyboards.get_main_menu()
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        if data == "main_menu":
            await self.show_main_menu(query)
        elif data == "catalog":
            await self.show_catalog(query)
        elif data == "cart":
            await self.show_cart(query)
        elif data == "orders":
            await self.show_orders(query)
        elif data == "about":
            await self.show_about(query)
        elif data == "support":
            await self.show_support(query)
        elif data.startswith("product_"):
            product_id = data.split("_")[1]
            await self.show_product(query, product_id)
        elif data.startswith("add_"):
            product_id = data.split("_")[1]
            await self.add_to_cart(query, product_id, 1)
        elif data.startswith("qty_"):
            parts = data.split("_")
            product_id = parts[1]
            quantity = int(parts[2])
            await self.add_to_cart(query, product_id, quantity)
        elif data == "checkout":
            await self.show_checkout(query)
        elif data == "confirm_order":
            await self.confirm_order(query)
        elif data == "clear_cart":
            await self.clear_cart(query)
        elif data.startswith("page_"):
            await self.show_catalog_page(query, data)
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é {SHOP_NAME}",
            reply_markup=Keyboards.get_main_menu()
        )
    
    async def show_catalog(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
        products = await self.moysklad.get_products(limit=5)
        
        if not products:
            await query.edit_message_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                reply_markup=Keyboards.get_main_menu()
            )
            return
        
        catalog_text = "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        for i, product in enumerate(products[:5], 1):
            catalog_text += f"{i}. {product['name']}\n"
            catalog_text += f"   üí∞ {product['price']} {CURRENCY}\n"
            catalog_text += f"   üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product['stock']} —à—Ç.\n\n"
        
        catalog_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        keyboard = []
        for product in products[:5]:
            keyboard.append([InlineKeyboardButton(
                product['name'], 
                callback_data=f"product_{product['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        await query.edit_message_text(
            catalog_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_product(self, query, product_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
        product = await self.moysklad.get_product_by_id(product_id)
        
        if not product:
            await query.edit_message_text(
                "üòî –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=Keyboards.get_main_menu()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_items = self.db.get_cart(query.from_user.id)
        in_cart = any(item['product_id'] == product_id for item in cart_items)
        
        product_text = f"""
üõçÔ∏è {product['name']}

üìù {product['description']}

üí∞ –¶–µ–Ω–∞: {product['price']} {CURRENCY}
üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product['stock']} —à—Ç.
        """
        
        await query.edit_message_text(
            product_text,
            reply_markup=Keyboards.get_product_keyboard(product_id, in_cart)
        )
    
    async def add_to_cart(self, query, product_id, quantity):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        product = await self.moysklad.get_product_by_id(product_id)
        
        if not product:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        if product['stock'] < quantity:
            await query.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ! –î–æ—Å—Ç—É–ø–Ω–æ: {product['stock']}")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        self.db.add_to_cart(
            user_id=query.from_user.id,
            product_id=product_id,
            product_name=product['name'],
            quantity=quantity,
            price=product['price']
        )
        
        await query.answer(f"‚úÖ {product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        await self.show_product(query, product_id)
    
    async def show_cart(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cart_items = self.db.get_cart(query.from_user.id)
        
        if not cart_items:
            await query.edit_message_text(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=Keyboards.get_main_menu()
            )
            return
        
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total = 0
        
        for item in cart_items:
            item_total = item['price'] * item['quantity']
            total += item_total
            cart_text += f"üì¶ {item['name']}\n"
            cart_text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}\n"
            cart_text += f"   –¶–µ–Ω–∞: {item['price']} {CURRENCY}\n"
            cart_text += f"   –°—É–º–º–∞: {item_total} {CURRENCY}\n\n"
        
        cart_text += f"üí∞ –ò—Ç–æ–≥–æ: {total} {CURRENCY}"
        
        await query.edit_message_text(
            cart_text,
            reply_markup=Keyboards.get_cart_keyboard()
        )
    
    async def show_checkout(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        cart_items = self.db.get_cart(query.from_user.id)
        
        if not cart_items:
            await query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return
        
        total = sum(item['price'] * item['quantity'] for item in cart_items)
        
        checkout_text = f"""
üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞

üìã –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:
"""
        
        for item in cart_items:
            checkout_text += f"‚Ä¢ {item['name']} x{item['quantity']} = {item['price'] * item['quantity']} {CURRENCY}\n"
        
        checkout_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total} {CURRENCY}\n\n"
        checkout_text += "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
        
        await query.edit_message_text(
            checkout_text,
            reply_markup=Keyboards.get_checkout_keyboard()
        )
    
    async def confirm_order(self, query):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        user_id = query.from_user.id
        cart_items = self.db.get_cart(user_id)
        
        if not cart_items:
            await query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = self.db.get_user_info(user_id)
        
        if not user_info or not user_info.get('phone') or not user_info.get('address'):
            await query.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∞–¥—Ä–µ—Å!")
            return
        
        total = sum(item['price'] * item['quantity'] for item in cart_items)
        order_number = f"ORDER_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{user_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = self.db.create_order(
            user_id=user_id,
            order_number=order_number,
            total_amount=total,
            items=cart_items,
            phone=user_info['phone'],
            address=user_info['address']
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –ú–æ–π–°–∫–ª–∞–¥
        if order_id:
            moysklad_order_id = await self.moysklad.create_order({
                'order_number': order_number,
                'items': cart_items
            })
            
            if moysklad_order_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                self.db.update_order_status(order_id, 'synced_with_moysklad')
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        self.db.clear_cart(user_id)
        
        success_text = f"""
‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!

üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}
üí∞ –°—É–º–º–∞: {total} {CURRENCY}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_info['phone']}
üìç –ê–¥—Ä–µ—Å: {user_info['address']}

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!
        """
        
        await query.edit_message_text(
            success_text,
            reply_markup=Keyboards.get_main_menu()
        )
    
    async def clear_cart(self, query):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
        self.db.clear_cart(query.from_user.id)
        await query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
        await self.show_cart(query)
    
    async def show_orders(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        orders = self.db.get_user_orders(user_id)
        
        if not orders:
            await query.edit_message_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
                reply_markup=Keyboards.get_main_menu()
            )
            return
        
        orders_text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        
        for order in orders:
            status_emoji = {
                'new': 'üÜï',
                'confirmed': '‚úÖ',
                'processing': '‚öôÔ∏è',
                'shipped': 'üöö',
                'delivered': 'üì¶',
                'cancelled': '‚ùå'
            }.get(order['status'], '‚ùì')
            
            orders_text += f"{status_emoji} –ó–∞–∫–∞–∑ {order['order_number']}\n"
            orders_text += f"   –°—Ç–∞—Ç—É—Å: {order['status']}\n"
            orders_text += f"   –°—É–º–º–∞: {order['total_amount']} {CURRENCY}\n"
            orders_text += f"   –î–∞—Ç–∞: {order['created_at']}\n\n"
        
        await query.edit_message_text(
            orders_text,
            reply_markup=Keyboards.get_main_menu()
        )
    
    async def show_about(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
        about_text = f"""
‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ

{SHOP_NAME}

{SHOP_DESCRIPTION}

‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –®–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É—á–µ—Ç–∞

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
‚Ä¢ Email: info@shop.ru
‚Ä¢ –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1
        """
        
        await query.edit_message_text(
            about_text,
            reply_markup=Keyboards.get_main_menu()
        )
    
    async def show_support(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
        support_text = """
üìû –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!

üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:
‚Ä¢ –ü–Ω-–ü—Ç: 9:00 - 18:00
‚Ä¢ –°–±: 10:00 - 16:00
‚Ä¢ –í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π

üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã:
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
‚Ä¢ WhatsApp: +7 (XXX) XXX-XX-XX
‚Ä¢ Email: support@shop.ru
        """
        
        await query.edit_message_text(
            support_text,
            reply_markup=Keyboards.get_support_keyboard()
        )
    
    async def show_catalog_page(self, query, data):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await self.show_catalog(query)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not TELEGRAM_BOT_TOKEN:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()

if __name__ == "__main__":
    bot = ShopBot()
    bot.run()
