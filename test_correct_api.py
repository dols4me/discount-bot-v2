import aiohttp
import asyncio
import json

async def test_correct_api():
    api_token = "70ff03c8f6f33ae7b62744eb0af127b043de02fb"
    base_url = "https://api.moysklad.ru/api/remap/1.2"
    
    headers = {
        'Authorization': f'Bearer {api_token}',
        'Accept': 'application/json;charset=utf-8',
        'Accept-Encoding': 'gzip'
    }
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (/entity/product)...")
    url = f"{base_url}/entity/product"
    params = {'limit': 3}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers, params=params) as response:
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
            
            if response.status == 200:
                data = await response.json()
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(data.get('rows', []))}")
                
                if data.get('rows'):
                    for i, product in enumerate(data['rows'][:2]):
                        print(f"üîç –¢–æ–≤–∞—Ä {i+1}: {product.get('name', 'Unknown')}")
                        print(f"üìÑ ID: {product.get('id')}")
                        print(f"üìÅ –ü–∞–ø–∫–∞: {product.get('productFolder', {}).get('name', '–ù–µ—Ç –ø–∞–ø–∫–∏')}")
                        print(f"üí∞ –¶–µ–Ω–∞: {product.get('salePrices', [{}])[0].get('value', 0) if product.get('salePrices') else 0}")
                        print("---")
            else:
                error_text = await response.text()
                print(f"‚ùå –û—à–∏–±–∫–∞: {error_text}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ (/entity/stock)...")
    url = f"{base_url}/entity/stock"
    params = {'limit': 5}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers, params=params) as response:
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
            
            if response.status == 200:
                data = await response.json()
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(data.get('rows', []))}")
                
                if data.get('rows'):
                    for i, stock in enumerate(data['rows'][:2]):
                        print(f"üîç –û—Å—Ç–∞—Ç–æ–∫ {i+1}:")
                        print(f"üìÑ –¢–æ–≤–∞—Ä: {stock.get('assortment', {}).get('name', 'Unknown')}")
                        print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stock.get('quantity', 0)}")
                        print(f"üè™ –°–∫–ª–∞–¥: {stock.get('store', {}).get('name', 'Unknown')}")
                        print("---")
            else:
                error_text = await response.text()
                print(f"‚ùå –û—à–∏–±–∫–∞: {error_text}")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞...")
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
    product_url = f"{base_url}/entity/product"
    product_params = {'limit': 1}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(product_url, headers=headers, params=product_params) as response:
            if response.status == 200:
                product_data = await response.json()
                if product_data.get('rows'):
                    product = product_data['rows'][0]
                    product_id = product.get('id')
                    product_name = product.get('name', 'Unknown')
                    
                    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name} (ID: {product_id})")
                    
                    # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    stock_url = f"{base_url}/entity/stock"
                    stock_params = {
                        'filter': f'assortment.id={product_id}',
                        'limit': 5
                    }
                    
                    async with session.get(stock_url, headers=headers, params=stock_params) as stock_response:
                        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: {stock_response.status}")
                        
                        if stock_response.status == 200:
                            stock_data = await stock_response.json()
                            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {len(stock_data.get('rows', []))}")
                            
                            if stock_data.get('rows'):
                                for stock in stock_data['rows']:
                                    print(f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: {stock.get('quantity', 0)} –Ω–∞ —Å–∫–ª–∞–¥–µ {stock.get('store', {}).get('name', 'Unknown')}")
                            else:
                                print("üì¶ –û—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        else:
                            error_text = await stock_response.text()
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {error_text}")

if __name__ == "__main__":
    asyncio.run(test_correct_api())
